// Code generated by go-bindata.
// sources:
// list.json
// DO NOT EDIT!

package mailchecker

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _listJson = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x94\x59\x4b\x8f\xe4\xb6\x11\xbe\xfb\x57\x0c\xf6\x6c\x69\x66\x7a\x67\xd7\x8e\x8f\x46\xd6\xb9\x64\x81\x20\x4e\x4e\x41\x0e\x94\x54\x92\x38\xa2\x48\x2e\x1f\xad\xd6\x04\xf9\xef\x29\x52\x14\x1f\x52\x8f\x63\x63\xb1\x40\xd7\xc7\x12\x59\x2c\xd6\x7b\xfe\xf3\xdd\xc3\xc3\x87\xd1\x18\xf9\xd3\xe3\xa3\x11\xea\x2a\x79\xdd\x8a\xf9\xd1\xc0\x2c\x85\x22\x6a\x85\x99\x50\x56\x8f\x66\x66\x1f\x7e\x7a\xf8\xd7\xc3\x87\xa7\xca\x03\xc8\xf3\xe1\x7b\xa4\x7e\x7c\xfe\x54\x2b\xeb\x7f\xb6\x8c\xb6\x13\xe4\xab\xcf\x4f\x33\xe5\xd6\x14\xd8\xe5\x1e\x26\x95\xe0\xc3\x4e\x7d\xbc\xc3\xf1\xb1\xab\x24\xa1\xdc\xd0\xc4\xf6\xb2\x10\xd5\xdd\xa3\x39\x98\x82\x16\x6a\x70\xf4\xe7\x3b\xdb\x92\x99\x32\x18\xa8\x89\x34\x17\xbc\x11\xb7\x7d\x0b\x47\xae\xb3\x03\xe2\xba\xa1\x5a\x92\xb9\xee\xc0\x91\x0d\x40\x8f\x3b\x4c\xfb\x72\x43\xf9\x94\x6f\xdf\x50\x51\xcd\x16\x34\xa3\xfb\x8e\x8d\x68\x3c\x03\xe5\xbd\xd8\xe8\xde\x8c\xb0\xc4\x0f\x14\x6e\x98\x6f\xa0\xb9\x58\xe2\xb7\x76\x98\x81\x8b\x28\x6c\x63\x67\xb9\xe6\xdc\xad\xd0\xb3\x50\x72\x4c\xb4\x55\x8a\x02\x0b\x6f\x49\x15\xc4\x15\xdb\x50\x7c\x2e\x3e\x25\x40\xa9\x75\x11\x8a\x75\xe1\x6a\xad\xd5\x06\xa5\x74\x3f\x3b\xd2\x0a\xc1\x40\xc7\x83\x3b\xc2\x3b\x5a\x5c\xb4\x23\xab\x02\x19\x29\x20\x1d\xe9\x3a\x05\x5a\x27\xc8\xab\x8d\x9a\x8d\xb8\x72\xcb\x58\xb1\x01\xd5\x2d\x3e\xd7\x7b\xd0\x26\x13\x22\x52\x68\x38\x30\x21\x64\x48\xc3\xe2\xdd\x3a\xd1\x0d\x90\x9e\xd4\x91\x27\x2a\x98\x44\x27\xf8\xb6\xdb\x66\xc1\x48\x1a\x05\x43\xe2\xe5\x46\x03\xef\x66\xc8\x9e\xbc\x43\xa5\x57\x50\xbc\xa1\x83\xd6\x42\x2a\xf0\xb6\x17\x29\xb7\xf4\xf9\xa9\x20\xe9\x20\xc2\x86\x1b\xc9\x7b\x7a\x85\x82\x63\xa6\x1a\x54\x81\xa0\x2c\x1a\x68\x01\xed\x5e\x4a\x85\x83\xeb\x46\xc5\x15\x27\x00\xf0\x82\xf9\x56\x13\x53\x8f\x9e\xee\xc9\x04\x94\x67\x86\xbd\x01\xbd\x50\x33\x31\x54\xf0\x04\xa3\x6e\xd1\x36\x48\x04\x28\x7b\xcb\x6f\xda\xd3\x92\x54\x1f\x3f\x16\xba\x19\xc0\x3c\xe7\x0c\x48\x5f\x3c\xdd\xab\x40\xee\x4f\x90\x18\x76\x24\x98\xfd\x40\xf5\x28\xad\x94\x6b\x64\x51\x40\x4c\x35\x8a\x68\xa0\x83\x05\x45\x19\x23\xc5\x3e\x88\xfd\x36\xd8\x30\xd1\x46\xfb\x1f\x6b\x0c\x0e\x65\x6c\x18\x09\x33\xc2\xbf\xfc\x0e\x88\x76\xd4\xd4\xbc\x41\x02\x8c\x14\xd1\xea\x47\xcb\x88\x64\x24\x3c\x2b\x45\x19\xfd\xc7\x60\x0b\x72\x57\x0c\xf5\x2f\x9a\x48\xde\x8a\x81\x53\x23\x72\x09\x4a\x30\xa8\xa3\x04\x83\x21\x53\xae\xf1\x57\x55\xa8\x9e\x4a\x21\xf6\xf5\x57\x28\x5c\x64\x27\xc3\x96\x3b\xb9\x33\xf3\xdb\x6b\xb4\x80\x57\xcb\xa7\xe7\xf8\xe1\x04\x20\xe7\x22\xe6\x4c\x14\x8d\x74\xac\x4d\xeb\x09\xf6\x96\x82\xe1\x64\x99\xb1\xaa\x01\x83\x21\xa8\x89\x52\xb1\x51\x77\xd7\x9d\x85\x51\x03\x9d\x4a\x2a\x64\x02\x6f\xe4\x32\x90\xd9\x78\x85\x98\xec\xc0\xd6\xb4\x2c\xdd\xb9\x75\xeb\x0f\x9b\x5f\xd0\xca\xb3\x9d\x9d\x54\x55\x16\xea\x36\x0b\xf3\xb2\x36\xeb\xfe\xf3\xc5\x28\xa2\x63\x80\x74\x48\x4b\x4c\x5b\x00\xf8\x52\xc9\xf1\x3c\x70\x93\x59\xe8\xdc\xdc\xf5\x47\x55\xd2\x04\x53\xe7\x1d\x24\x28\x38\x21\x97\x9c\x69\x86\x9a\xaa\x8c\x60\xd7\x44\x9c\xe4\x3c\x1d\xc1\x41\x53\x52\x00\x18\x53\x73\x5a\x3b\xf5\xe6\xc0\x9b\x33\xfd\xfd\x95\xe7\xe6\xb6\x2b\x12\x33\x44\xfe\xa4\x18\xef\x34\x19\xa0\x01\x32\xa3\x22\x36\x73\x9e\x29\xa8\xae\xf0\xa5\x93\xbf\xcc\xa2\xb1\x2a\xa3\x82\x17\xf7\xa8\x85\xde\x23\x9a\x38\x27\xd3\xc5\x37\xe6\xf2\xf4\xf4\xa7\x48\xad\x92\x28\xb3\x62\x62\x92\xfb\xb1\xab\x1c\x31\xe7\x8a\xb9\x3c\x69\xf5\xda\xc9\x21\x0e\x72\x89\x96\xc7\x45\xe5\x7d\x6d\xd1\x1b\xd5\x58\x96\xad\x9d\xcb\x14\x2e\x06\xaf\xaf\xdc\x3f\xb9\xf7\xaf\xcb\x0c\x89\x09\x73\xab\xcf\x04\x5b\x30\x4e\xb8\xc3\x5e\x6a\xab\x13\x85\x71\xb4\xa0\x0d\x5e\x62\xd2\xd9\xde\xe6\x6c\x35\x98\xe8\x4b\xcf\xe2\x56\xd7\xd0\xd9\x5a\xfb\xe7\xe2\x0b\xeb\x62\xb4\x46\xdd\x2e\xa4\x60\x16\x1c\xb7\x83\x7a\xf6\x87\x66\x2e\x24\x16\x26\x69\xbb\x73\xc9\xd7\xd7\x29\x3a\x9b\x14\x68\x1f\x74\x02\xd5\x32\xdb\x04\x7d\x63\xc8\x28\xf2\xba\x54\x86\xc7\x53\xbf\x7d\x8b\xbf\x2c\xaa\xb0\xc8\x1f\x0a\x5a\xd1\xe1\xf9\xb0\x11\x43\x83\x4f\x99\xb2\xbf\x9a\xbf\x4d\xd1\x19\x94\x94\x53\x0c\x2f\xca\xe0\xbf\x9d\xd0\x4f\x7c\xdd\xb9\x34\xe9\xa1\xca\xe3\x9e\x03\xcc\x5a\x44\xb8\x0d\x72\xf9\x3f\x88\xaf\xb1\x30\x01\xd6\x47\x6a\x45\x4d\xfb\x07\x88\x92\x68\x5c\xc6\x5a\xc4\x28\xdb\xba\x5a\x32\xbf\xab\x4b\xf5\x8e\x77\x84\xe4\xec\x7a\x24\x6a\x62\x04\x33\x71\xda\x61\xa4\x9b\xb7\x6c\x77\xd5\x13\x94\x25\x9b\xc6\x28\xa5\x33\xcd\x68\x74\x2f\xd6\x03\x49\xb7\xe4\xa4\x34\x3f\x2d\x7a\x7a\xa0\x85\x32\x55\x56\xf8\x68\x81\x69\xd1\x8c\x34\x09\xe1\x4c\x95\x91\xf8\x53\xdb\xfd\x27\xb9\x82\x32\x39\x1b\x56\x9c\x51\x85\x81\x0c\x11\x60\x23\x87\x92\x79\xd8\x8f\x0c\x94\xb2\x89\xba\x25\xcd\xef\xb4\xc2\xe4\xac\xa5\x42\x55\x62\x52\x66\x66\x2d\x37\xbb\x05\x2f\x70\x54\x0b\x4a\xe4\xab\x58\x32\xe6\x64\xaf\x00\x2e\x2f\x77\x90\x24\x4e\x00\xc0\x1e\x80\x5c\xa8\x00\x65\x17\x0e\x48\x76\xe7\x01\xcb\x62\x0c\xb0\xf9\x59\xee\xcd\x99\x30\x85\x7e\x47\x91\x12\xa6\xa3\x69\x5f\x08\x1c\xbc\x37\x89\x37\x61\x74\x2d\x64\x61\x39\x3b\xcb\x38\x67\x61\xa0\x58\x14\xb9\xbd\x38\x73\x95\xa2\x10\x2f\x3c\x7d\x6d\xa7\x1c\x91\x98\xaa\x74\x12\xd1\x4a\x50\xbe\x34\x2a\x6c\xc9\xa1\x3e\x89\xa9\xfa\x55\x6e\x88\x2a\xcb\x57\x03\x18\x4c\xd0\xbe\x83\x86\x50\x34\xc0\x46\x20\x56\x3d\x2e\xa3\x12\x46\x89\xce\x01\x28\x9a\x40\x8f\x6c\x89\x96\xbe\x95\xc0\x89\x23\xbc\x8c\x03\xf6\x00\x12\xae\x95\x43\xf1\xa3\x4d\x52\x93\x93\x97\x7c\x5d\x64\xc5\x64\x2a\x86\xe3\xd9\xa1\x22\x3e\x34\xb3\x99\x0c\x1e\x2d\x4f\xf5\xb1\x7a\x8b\xdb\x49\x47\x0e\x5c\x85\xbd\x3c\x3d\x3f\x25\x46\xaa\xa9\x76\xb1\x7c\x75\xb6\x5f\xde\x77\x54\x62\x21\x18\xa3\x3d\x7a\xe8\x85\xee\x04\x7f\xcc\x67\xdd\xf6\x4e\xe9\x48\x97\xe2\x2a\xd7\xa0\x66\x4c\x88\x14\xc7\x24\x64\xb3\x2e\x0f\xe4\x29\xd5\x03\x70\xe4\xf0\x34\x31\x25\x9d\x7f\x51\xa8\x29\x02\x5b\x3e\x8d\x34\xa8\xe2\x9b\xf5\xb4\xcb\x5a\x6e\x83\xfe\x41\x09\x97\x29\x0c\x98\x95\x75\xb1\x4b\xb2\xc3\xa0\x55\x56\x91\x63\x1c\x3b\xeb\x15\xeb\x3d\x57\xf6\x45\x25\x2d\x30\x2c\xa0\xfa\xfc\x82\xcb\xf8\xd2\xef\xb6\xbc\x8c\xab\x7f\xc6\x2d\x54\x2f\x28\x40\x1e\xff\xe3\xa6\xf6\xcd\xca\x5c\xd4\x55\xc8\xfc\xd0\xd5\x5a\x25\xa2\x5c\x6f\x30\xf2\x6d\x90\xc0\xb3\x53\xdf\xa8\x94\x65\x72\x7a\x13\xe4\xb6\x39\xe7\xc3\xbf\xbf\xcf\x66\x2c\xcb\xb2\xd4\xd8\x7a\x0c\x03\xc6\xcc\xc5\x57\xc2\x8f\x0d\x1d\x2a\x46\xb5\xa9\x44\x5f\x6d\x0d\xad\x2b\xc7\xab\x68\x9f\x5b\xbf\x59\x61\x16\xba\xd2\x16\xf4\xe3\x36\x88\xb9\x37\x5c\x09\x1d\x72\x51\xa8\x1d\xba\xda\xb2\x37\xbd\xdb\x26\x79\x7f\xb8\xc4\x9b\x1c\x9a\x87\x89\xe8\xb2\x01\x08\x9d\x7c\x56\xeb\xfe\xae\x12\xfa\x58\xcf\xce\x82\x98\xdf\xac\xf0\xcc\x56\x77\x85\x73\xee\x16\x72\x58\x01\xe7\x69\xea\x58\xce\xe8\x11\x13\x6b\x51\x54\x70\x38\x26\xe3\x90\x23\x0f\x64\x91\x32\xcf\x79\xf0\xb0\x9c\xb2\x1e\xdc\xee\xa4\xb4\x3f\x9c\x9d\x0e\x99\xa8\xc8\x1f\x77\xc3\xa6\x37\x1b\xac\x22\x0e\x23\xb2\x77\x22\xde\xd1\xe3\x6f\xa8\x11\x19\xc3\x55\xee\x0d\x67\x53\xc6\x13\x30\xe0\x2a\x3c\xcb\xfa\x94\xf1\x88\xbc\xbc\x72\xbd\x81\xc2\xdd\x30\x36\xa9\x09\x5c\xa5\xe5\x0c\xbb\xb5\x5a\x53\xc1\x2b\xcf\xfc\xf8\xfc\xf2\xc3\xa7\xcb\xcb\x66\xf8\xef\x99\x7a\x85\x31\x17\xf7\x58\xab\x05\xbb\x80\xca\x77\xec\x0e\x52\x15\xb1\xc6\x57\xe3\x02\x0b\x3e\x85\x7b\x18\x83\x0e\xa3\x90\x29\x9b\x54\x7a\xc3\xeb\xc2\x8c\xe0\x6e\xcc\x2d\x63\xe5\xd9\x50\xbf\x22\xf2\x25\xb7\xe5\x43\xa7\x8c\x55\x37\xae\x76\xc2\xb8\x54\x13\x47\x1e\xef\x0e\x19\x8e\x6f\x79\x0c\x79\xff\x40\x2d\x7c\xf9\x9a\x9b\x27\xbe\xc3\xc1\x42\x12\x12\xea\x89\x04\x44\xa3\x4c\x50\xac\x41\x23\x92\xaa\xa7\x63\x91\x11\xea\xc9\x63\x37\x58\xcc\x40\x1f\xb6\x80\x92\x4f\xd4\xbe\x14\xf1\xe4\x2f\x58\x0f\xfe\x2d\x1f\xd6\x9c\xa6\x28\xc7\x4e\xf5\x2b\xda\xca\x97\xfc\xc0\x5f\x4b\x9f\x2c\x4d\xee\x06\x6e\x48\xe5\x33\xc8\x23\xfe\x9f\x2d\xa7\x66\x7d\xc4\x74\x0b\xa4\xd3\x8f\x0d\xe1\x27\x53\x0a\xc9\x17\x74\xfd\xe9\xe5\xf3\x73\x88\x9d\xa7\xd1\x69\x31\x68\x6d\xc1\x99\x6f\xbe\x9c\x21\x81\xe7\xde\xc0\xb2\x1c\x3c\x1e\x86\x80\x45\xe2\x2e\xea\x90\x6d\x02\x98\x0a\xac\xf7\x66\x71\x0a\x03\xf9\x73\xb4\x84\xc1\x0d\xc0\x0c\xdc\x4c\xec\xd1\x0f\x53\x9d\x43\x9c\x76\xd3\xde\xcb\x29\x50\xff\xd1\xb8\x4c\x9e\x5d\x91\xf7\x5a\x4b\xb6\xd9\xca\x9d\x49\xc1\x9d\xd0\xed\x9a\x92\x14\xc7\xd5\x75\xa6\xed\x18\xe3\xf8\x31\xae\x83\x79\xa3\x1d\x15\x7b\x4f\xc7\xad\xea\xd1\xa3\xb2\x11\x2c\x76\xbf\xa2\xef\x8b\xa8\x7d\xee\x5b\xe9\x95\xb4\xb1\x99\x94\x96\x4f\x59\x3b\xaa\xf3\x52\xfe\x9c\x01\xfe\x70\xfb\x75\x27\x5f\xbc\xdf\x71\x95\x19\xe1\x77\x44\xfb\x53\xa3\x71\x6a\x1f\x50\xe1\x59\xe5\xf5\xff\x0b\xc4\xdc\x0a\x7c\xf1\x13\x03\x7f\xe1\xf8\xe6\xea\x27\x03\xb3\x9e\x42\x17\x78\x4a\x35\x7f\xc6\xc0\xfe\x33\x3e\xc7\x4e\xff\x62\xd1\x03\xfe\x6e\xa3\x36\x7e\xc6\xde\xf8\x6b\xf6\xf7\x91\xbf\xe2\x33\xfd\x33\x1b\xe8\xfd\xea\x7a\xe3\x5f\xb2\xde\xf8\xfd\xd8\x89\x66\x75\x6c\x2a\x3e\xff\xf0\xc9\xf9\x40\x96\xdf\x32\x24\xdc\x28\x43\xc2\x1b\x9c\x3e\x3a\x7d\x73\xfa\x84\xbc\x92\x1b\x91\x51\x4b\xf8\x24\x8a\x16\x04\xe5\x9d\xd5\x6e\xce\xa9\x0b\x07\x2f\x47\xf8\xa8\x7a\xfe\xcd\x66\x31\x20\x02\x7b\x1c\x88\xc0\xee\xe2\x62\xa1\x13\x6d\x50\x69\x71\xdf\x0d\x6a\xc9\x2c\xed\x09\x53\x07\xa4\x47\x09\x0e\xd0\x80\xf6\x77\x80\x66\xab\xd3\x80\x68\x83\x50\x1e\xec\x00\xa7\x12\x44\xe1\xae\xc9\xec\x02\x16\x27\xb9\x74\x89\x1a\x99\x5d\xcd\xdd\x62\x04\x6b\xd3\xdb\x45\xe4\xcc\xb3\x8f\x23\x37\x44\x52\x7c\xe4\xce\xc6\x21\x15\xba\xc7\xc4\x68\x2a\x46\xf6\xf5\xc0\xbe\xc3\x25\x93\xb1\xca\x92\x28\xaa\x95\x8c\xf6\xc6\x85\xf7\x0c\x90\x63\xf4\xb9\x2b\x46\x1b\x43\x86\x44\xc2\xd2\x12\x6d\x66\xe8\xd2\x78\xb5\x04\xc3\x25\x4a\x70\x6f\x39\xdc\x2b\xa2\x93\x90\x95\x60\x4e\x4a\x7d\x4b\x81\x06\xde\x1b\x19\x98\x70\xb9\x0c\x93\xdc\x77\xff\xfd\xee\x7f\x01\x00\x00\xff\xff\x5e\x52\x03\x08\x8a\x1d\x00\x00")

func listJsonBytes() ([]byte, error) {
	return bindataRead(
		_listJson,
		"list.json",
	)
}

func listJson() (*asset, error) {
	bytes, err := listJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "list.json", size: 7562, mode: os.FileMode(438), modTime: time.Unix(1448530772, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"list.json": listJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"list.json": &bintree{listJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, path.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, path.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
